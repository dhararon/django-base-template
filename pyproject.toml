[tool.pdm.build]
includes = []
[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool.ruff]
src = ["src"]
select = ["ALL"]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = [
    "A",
    "B",
    "C",
    "D",
    "E",
    "F",
    "G",
    "I",
    "N",
    "Q",
    "S",
    "T",
    "W",
    "ANN",
    "ARG",
    "BLE",
    "COM",
    "DJ",
    "DTZ",
    "EM",
    "ERA",
    "EXE",
    "FBT",
    "ICN",
    "INP",
    "ISC",
    "NPY",
    "PD",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "RET",
    "RSE",
    "RUF",
    "SIM",
    "SLF",
    "TCH",
    "TID",
    "TRY",
    "UP",
    "YTT",
]

ignore = [
    "ANN",      # Type hints related, let mypy/pyright handle these.
    "COM812",   # "Trailing comma missing". If black is happy, I'm happy.
    "D104",     # Missing docstring in public package
    "D100",     # Missing docstring in public module
    "E501",     # "Line too long". If black is happy, I'm happy.
    "EM101",    # "Exception must not use a string literal, assign to variable first"
    "EM102",    # "Exception must not use an f-string literal, assign to variable first"
    "SIM108",   # "Use ternary operator ...". Ternary is harmful for readability in some cases.
    "TRY003",   # "Avoid specifying long messages outside the exception class"
    "FIX002",   # Allow TODOs in the code
    "TD002",    # Missing author in TODO
    "TD003",    # Allow simples TODOs
    "D101",     # Missing docstring in public class
    "D102",     # Missing docstring in public method
    "D106",     # Missing docstring in public nested class
    "D401",     # First line of docstring should be in imperative mood: "Returns the short name for the user."
    "D105",     # Missing docstring in magic method
    "D205",     # 1 blank line required between summary line and description
    "RUF012",   # Mutable class attributes should be annotated with `typing.ClassVar`
    "ARG002",   # Unused method argument: `obj`
    "PGH004",   # Unused method argument: `obj`
]

exclude = ["tests", "migrations", "tests.py"]
force-exclude = true
line-length = 120

[tool.ruff.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.isort]
known-first-party = ["src"]

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.coverage.run]
omit = [
    "src/tests/*",
    "src/config/*",
    "__init__*",
]

[project]
authors = [
    {name = "Dharwin Perez", email = "dharwin.perez@pm.com"},
]
requires-python = "<4.0,>=3.12"
dependencies = [
    "django<5.0.0,>=4.2.10",
    "django-configurations<3.0,>=2.5",
    "django-anymail<11.0,>=10.2",
    "django-model-utils<5.0.0,>=4.4.0",
    "django-structlog<7.0.0,>=6.0.1",
    "python-dotenv<2.0.0,>=1.0.1",
    "pydantic<3.0.0,>=2.6.1",
    "whitenoise<7.0.0,>=6.6.0",
    "psycopg[binary]>=3.2.6",
]
name = "Loanbook"
version = "0.1.0"
description = ""

[dependency-groups]
dev = [
    "django-debug-toolbar<5.0.0,>=4.3.0",
    "django-extensions<4.0.0,>=3.2.3",
    "werkzeug<4.0.0,>=3.0.1",
    "pre-commit<4.0.0,>=3.6.1",
    "django-watchman<2.0.0,>=1.3.0",
]
api = [
    "djangorestframework<4.0.0,>=3.14.0",
    "drf-spectacular<1.0.0,>=0.26.5",
    "django-cors-headers<5.0.0,>=4.3.1",
    "django-rest-knox<5.0.0,>=4.2.0",
]
admin = [
    "django-admin-interface<1.0.0,>=0.26.1",
]
testing = [
    "pytest<8.0.0,>=7.4.4",
    "pytest-django<5.0.0,>=4.8.0",
]
local = [
    "ipdb<1.0.0,>=0.13.13",
]
